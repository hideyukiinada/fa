#!/usr/bin/env python
"""
Extracts a face from a photo, scale to a square format, and save in a directory.

Credit
-------
This file is based on the public domain source code downloaded from below URL:
http://dlib.net/face_landmark_detection.py.html

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import sys
import os
import logging
from pathlib import Path

import dlib
import cv2 as cv
import numpy as np

FACE_IMAGE_PATH = "../../images"
IMAGE_OUTPUT_PATH = "../../images_output"
IMAGE_FILE_EXTENSIONS = ["*.jpg", "*.jpeg", "*.png"]
IMAGE_HEIGHT = 512
IMAGE_WIDTH = 512
IMAGE_CHANNELS = 3

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))


def face_extract():
    """
    Extract one or more faces from a photo using dlib.
    """
    detector = dlib.get_frontal_face_detector()

    faces_folder = Path(FACE_IMAGE_PATH)
    output_folder = Path(IMAGE_OUTPUT_PATH)

    for e in IMAGE_FILE_EXTENSIONS:
        for f in faces_folder.glob(e):

            log.info("Processing file: %s" % (f))
            img = cv.imread(str(f))

            detected_faces = detector(img, 1)  # 1 to upsample the image 1 time
            log.info("Number of faces detected: %d" % (len(detected_faces)))

            for i, pos in enumerate(detected_faces):
                log.info("Face ID: %d: Left: %d Top: %d Right: %d Bottom: %d" % (
                    i, pos.left(), pos.top(), pos.right(), pos.bottom()))

                top = max(0, pos.top())
                left = max(0, pos.left())
                bottom = max(0, pos.bottom())
                right = max(0, pos.right())

                height = bottom - top
                width = right - left

                face = img[top:bottom, left:right]

                if height > width:
                    gap = height - width
                    edge = height
                else:
                    gap = width - height
                    edge = width

                # Allocate a new buffer filled with white
                img2 = np.full((edge, edge, face.shape[2]), 255.0)

                start = gap // 2

                if height > width:
                    img2[:, start:start + face.shape[1], :] = face
                else:
                    img2[start:start + face.shape[0], :, :] = face

                output_file = output_folder / f.name
                log.info("Saving %s" % (output_file))

                output_img = cv.resize(img2, (IMAGE_HEIGHT, IMAGE_WIDTH), interpolation=cv.INTER_LINEAR)

                cv.imwrite(str(output_file), output_img)


def main():
    """Defines an application's main functionality"""
    face_extract()


if __name__ == "__main__":
    main()
