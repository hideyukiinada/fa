#!/usr/bin/env python
"""
Extracts a face from a photo, scale to a square format, and save in a directory.

Credit
-------
This file is based on the public domain source code downloaded from below URL:
http://dlib.net/face_landmark_detection.py.html

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import sys
import os
import argparse
import logging
from pathlib import Path

import dlib
import cv2 as cv
import numpy as np

parser = argparse.ArgumentParser(description="face_extraction")
parser.add_argument("--input_dir", default="../../images", type=str, help="Input face images directory")
parser.add_argument("--output_dir", default="../../images_output", type=str, help="Output directory")
args = parser.parse_args()

FACE_IMAGE_PATH = args.input_dir
IMAGE_OUTPUT_PATH = args.output_dir

IMAGE_FILE_EXTENSIONS = ["*.jpg", "*.jpeg", "*.png"]
IMAGE_HEIGHT = 512
IMAGE_WIDTH = 512
IMAGE_CHANNELS = 3

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))


def face_extract():
    """
    Extract one or more faces from a photo using dlib.
    """
    detector = dlib.get_frontal_face_detector()

    faces_folder = Path(FACE_IMAGE_PATH)
    if faces_folder.exists() is False:
        raise ValueError("Not found %s" % (faces_folder))

    output_folder = Path(IMAGE_OUTPUT_PATH)
    if output_folder.exists() is False:
        output_folder.mkdir(parents=True, exist_ok=True)

    dir_list = [d for d in faces_folder.iterdir() if d.is_dir()]
    dir_list.append(faces_folder)

    file_no = 0
    for i, d in enumerate(dir_list):
        log.info("Scanning %s" % (d))

        for e in IMAGE_FILE_EXTENSIONS:
            for f in d.glob(e):

                log.info("Processing file: %s" % (f))
                img = cv.imread(str(f))

                detected_faces = detector(img, 1)  # 1 to upsample the image 1 time
                log.info("Number of faces detected: %d" % (len(detected_faces)))

                for i, pos in enumerate(detected_faces):
                    log.info("Face ID: %d: Left: %d Top: %d Right: %d Bottom: %d" % (
                        i, pos.left(), pos.top(), pos.right(), pos.bottom()))

                    face_top = max(0, pos.top())
                    face_left = max(0, pos.left())
                    face_bottom = min(img.shape[0] - 1, pos.bottom())
                    face_right = min(img.shape[1] - 1, pos.right())

                    face_height = face_bottom - face_top
                    face_width = face_right - face_left

                    face = img[face_top:face_bottom, face_left:face_right]

                    if face_height > face_width:
                        gap_w = face_height - face_width
                        edge = face_height  # pick the longer edge
                        gap_h = 0
                    else:
                        gap_h = face_width - face_height
                        edge = face_width
                        gap_w = 0

                    # Allocate a new buffer filled with white
                    img2 = np.full((edge, edge, face.shape[2]), 255.0)

                    img2[
                    int(np.floor(gap_h / 2)):int(np.floor(gap_h / 2)) + face_height,
                    int(np.floor(gap_w / 2)):int(np.floor(gap_w / 2)) + face_width,
                    :] = face

                    file_no += 1
                    output_file = output_folder / Path(f.stem + "_%d.jpg" % (file_no))
                    log.info("Saving %s" % (output_file))

                    output_img = cv.resize(img2, (IMAGE_HEIGHT, IMAGE_WIDTH), interpolation=cv.INTER_LINEAR)

                    cv.imwrite(str(output_file), output_img)


def main():
    """Defines an application's main functionality"""
    face_extract()


if __name__ == "__main__":
    main()
