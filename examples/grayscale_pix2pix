#!/usr/bin/env python
"""
This is my attempt to see if pix2pix can restore a color image from a gray-scale image.

An output image consists of:
* Ground-truth color image (y) on the left
* Input grayscale image (x) on the right


References
----------
pix2pix
Phillip Isola et al, Image-to-Image Translation with Conditional Adversarial Nets, https://phillipi.github.io/pix2pix/
Christopher Hesse, pix2pix-tensorflow, https://github.com/affinelayer/pix2pix-tensorflow

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import sys
import os
import logging
from pathlib import Path

import cv2 as cv
import numpy as np

INPUT_PATH = "../../images"
OUTPUT_PATH = "../../images_output"

IMAGE_FILE_EXTENSIONS = ["*.jpg", "*.jpeg", "*.png"]
IMAGE_HEIGHT = 256
IMAGE_WIDTH = 256
IMAGE_CHANNELS = 3

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))


def make_x_and_y_images():
    """
    Create input images from ground truth images
    """
    input_folder = Path(INPUT_PATH)
    output_folder = Path(OUTPUT_PATH)

    for e in IMAGE_FILE_EXTENSIONS:
        for f in input_folder.glob(e):
            log.info("Processing file: %s" % (f))
            img = cv.imread(str(f))

            top = 0
            left = 0
            bottom = img.shape[0]
            right = img.shape[1]

            height = bottom - top
            width = right - left

            img_x = cv.cvtColor(img, cv.COLOR_RGB2GRAY)  # note that shape becomes (h, w) by losing the color channel
            img_x = img_x.reshape(img_x.shape[0], img_x.shape[1], 1)  # restore the color channel

            # copy the first channel to the remaining two channels. 3 means that it gets copied twice.
            # see. https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.repeat.html
            img_x = np.repeat(img_x, 3, axis=2)

            if height > width:
                gap = height - width
                edge = height
            else:
                gap = width - height
                edge = width

            # Allocate a new buffer filled with white
            img2 = np.full((edge, edge, img.shape[2]), 255.0)

            img2_pix2pix = np.full((edge, edge, img.shape[2]), 255.0)

            start = gap // 2

            if height > width:  # portrait
                img2[:, start:start + width, :] = img
                img2_pix2pix[:, start:start + width, :] = img_x

            else:  # landscape
                img2[start:start + height, :, :] = img
                img2_pix2pix[start:start + height, :, :] = img_x

            output_file = output_folder / f.name
            log.debug("Saving %s" % (output_file))

            output_img = cv.resize(img2, (IMAGE_HEIGHT, IMAGE_WIDTH), interpolation=cv.INTER_LINEAR)
            output_pix2pix_img = cv.resize(img2_pix2pix, (IMAGE_HEIGHT, IMAGE_WIDTH), interpolation=cv.INTER_LINEAR)
            output_img2 = np.concatenate((output_img, output_pix2pix_img), axis=1)
            output_img = output_img2

            cv.imwrite(str(output_file), output_img)


def main():
    """Defines an application's main functionality"""
    make_x_and_y_images()


if __name__ == "__main__":
    main()
